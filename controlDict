/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2312                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pimpleFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         1000;

deltaT          0.2;

writeControl    timeStep;

writeInterval   250;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

functions
{
    yPlus
    {
        type            yPlus;
        libs            (fieldFunctionObjects);
        writeFields     yes;
        writeControl    writeTime;
    }
    wallShearStress
    {
        type                wallShearStress;
        libs                (fieldFunctionObjects);
        log                 yes;
        //patches             ( hills );
        writePrecision      17;
        writeFields         yes;
        writeToFile         yes;
        executeControl      timeStep;
        executeInterval     1;
        writeControl        writeTime;
        //timeStart           0;//1500.504
    }

    Cf
    {
        type                coded;
        libs                (utilityFunctionObjects);
        name                Cf;
        //timeStart           0;//1500.504
        writeControl        writeTime;

        codeExecute
        #{
            auto* CfPtr =
                mesh().getObjectPtr<volScalarField>("Cf");

            if (!CfPtr)
            {
                Info<< "Create skin-friction coefficient field" << nl;
                CfPtr = new volScalarField
                (
                    IOobject
                    (
                        "Cf",
                        mesh().time().timeName(),
                        mesh(),
                        IOobject::NO_READ,
                        IOobject::AUTO_WRITE,
                        IOobject::REGISTER
                    ),
                    mesh(),
                    dimless
                );

                regIOobject::store(CfPtr);
            }

            auto& Cf = *CfPtr;

            Info<< "Computing skin-friction coefficient field\n" << endl;

            const auto& tau =
                mesh().lookupObject<volVectorField>("wallShearStress");

            const dimensionedScalar Ubulk(dimVelocity, 0.1335);
            const dimensionedScalar smallDelta(dimVelocity*dimVelocity, 1e-10);

            //Cf = (-mag(tau.component(0))+mag(tau.component(1))+mag(tau.component(2)))*tau.component(0)/(mag(tau.component(0))+smallDelta)/(0.5*sqr(Ubulk));
            Cf = -sqrt(sqr(tau.component(0))+sqr(tau.component(1))+sqr(tau.component(2)))*(tau.component(0))/(mag(tau.component(0))+smallDelta)/(0.5*sqr(Ubulk));
        #};
    }
    dudy
    {
        type            coded;
        libs            (utilityFunctionObjects);
        name            dudy;
        writeControl    writeTime;
        
        codeExecute     #{
            auto* dudyPtr =
                mesh().getObjectPtr<volScalarField>("dudy");
            
            if (!dudyPtr)
            {
                Info<< "Create velocity gradient du/dy field" << nl;
                dudyPtr = new volScalarField
                (
                    IOobject
                    (
                        "dudy",
                        mesh().time().timeName(),
                        mesh(),
                        IOobject::NO_READ,
                        IOobject::AUTO_WRITE,
                        IOobject::REGISTER
                    ),
                    mesh(),
                    dimensionedScalar("dudy", dimVelocity/dimLength, 0.0)
                );
                
                regIOobject::store(dudyPtr);
            }
            
            auto& dudy = *dudyPtr;
            
            Info<< "Computing velocity gradient du/dy field\n" << endl;
            
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");
            
            // Calculate gradient of velocity field
            
            tmp<volTensorField> tgradU = fvc::grad(U);
            const volTensorField& gradU = tgradU();
            
            // Extract du/dy component (gradient of x-component in y-direction)
            dudy = gradU.component(tensor::XY);
        #};
    }
    nutDuDy
    {
        type            coded;
        libs            (utilityFunctionObjects);
        name            nutDuDy;
        writeControl    writeTime;
        
        codeExecute     #{
            auto* nutDuDyPtr =
                mesh().getObjectPtr<volScalarField>("nutDuDy");
            
            if (!nutDuDyPtr)
            {
                Info<< "Create turbulent viscosity times velocity gradient field (nut*du/dy)" << nl;
                nutDuDyPtr = new volScalarField
                (
                    IOobject
                    (
                        "nutDuDy",
                        mesh().time().timeName(),
                        mesh(),
                        IOobject::NO_READ,
                        IOobject::AUTO_WRITE,
                        IOobject::REGISTER
                    ),
                    mesh(),
                    dimensionedScalar("nutDuDy", dimViscosity*dimVelocity/dimLength, 0.0)
                );
                
                regIOobject::store(nutDuDyPtr);
            }
            
            auto& nutDuDy = *nutDuDyPtr;
            
            Info<< "Computing turbulent viscosity times velocity gradient field (nut*du/dy)\n" << endl;
            
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");
            const volScalarField& nut = mesh().lookupObject<volScalarField>("nut");
            
            // Calculate gradient of velocity field
            tmp<volTensorField> tgradU = fvc::grad(U);
            const volTensorField& gradU = tgradU();
            
            // Extract du/dy component (gradient of x-component in y-direction) and multiply by nut
            nutDuDy = nut * gradU.component(tensor::XY);
        #};
    }

    nuDuDy
    {
        type            coded;
        libs            (utilityFunctionObjects);
        name            nuDuDy;
        writeControl    writeTime;
        
        codeExecute     #{
            auto* nuDuDyPtr =
                mesh().getObjectPtr<volScalarField>("nuDuDy");
            
            if (!nuDuDyPtr)
            {
                Info<< "Create laminar viscosity times velocity gradient field (nu*du/dy)" << nl;
                nuDuDyPtr = new volScalarField
                (
                    IOobject
                    (
                        "nuDuDy",
                        mesh().time().timeName(),
                        mesh(),
                        IOobject::NO_READ,
                        IOobject::AUTO_WRITE,
                        IOobject::REGISTER
                    ),
                    mesh(),
                    dimensionedScalar("nuDuDy", dimViscosity*dimVelocity/dimLength, 0.0)
                );
                
                regIOobject::store(nuDuDyPtr);
            }
            
            auto& nuDuDy = *nuDuDyPtr;
            
            Info<< "Computing laminar viscosity times velocity gradient field (nu*du/dy)\n" << endl;
            
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");
            
            // Get laminar kinematic viscosity from transportProperties
            const dictionary& transportProperties = mesh().lookupObject<IOdictionary>("transportProperties");
            const dimensionedScalar nu("nu", dimViscosity, transportProperties);
            
            // Calculate gradient of velocity field
            tmp<volTensorField> tgradU = fvc::grad(U);
            const volTensorField& gradU = tgradU();
            
            // Extract du/dy component and multiply by nu
            nuDuDy = nu * gradU.component(tensor::XY);
        #};
    }

    fieldAverage1
    {
        type            fieldAverage;
        libs            (fieldFunctionObjects);
        writeControl    writeTime;

        fields
        (
            U
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }

            p
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }

            nut
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }

            yPlus
            {
                mean        on;
                prime2Mean  off;
                base        time;
            } 
            Cf
            {
                mean        on;
                prime2Mean  off;
                base        time;
            } 
            dudy
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }
            nutDuDy
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }

            nuDuDy
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }

        );
    }
}


// ************************************************************************* //
